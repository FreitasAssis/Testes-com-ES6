yarn init

//instalar as dependencias para trabalhar com a interface de linha de comando do Babel

yarn add @babel/cli

yarn add @babel/preset-env

yarn add @babel/core

//ignorar a pasta do node no controle de versão do git
   criar o arquivo ".gitignore" na raiz do projeto
   listar a pasta "node_modules/" na primeira linha do arquivo

//configurar o Babel
   criar o arquivo ".babelrc" contendo o código:

   {
      "presets": ["@babel/preset-env"]
   }

//criar o arquivo "index.html"
//criar "main.js"
//dentro de main:

alert('Teste');

//em package.json, criar a propriedade "scripts", que vai descrever como executar comandos via terminal

"scripts": {
   "dev": "babel ./main.js -o ./bundle.js -w"
}

//feito isso, pode executar o seguinte comando no terminal:

yarn dev

//ele criará o arquivo bundle.js, que trará o código ES6 traduzido para os navegadores

//no body do html, inserir o script q chama o bundle
<script src="./bundle.js"></script>

//utilizando REST / SPREAD

yarn add @babel/plugin-proposal-object-rest-spread

//em babelrc:
{
  "presets": ["@babel/preset-env"],
  "plugins": ["@babel/plugin-proposal-object-rest-spread"]
}
-----------------------------------------------------------------

//como as dependências que estão sendo instaladas são apenas para o ambiente de desenvolvimento, alteramos as dependências para 'devDependencies'
//instalar as seguintes dependências:

yarn add webpack webpack-cli -D

//o -D é para que seja instalado apenas para o ambiente de desenvolvimento

//criar o arquivo de configuração do webpack

webpack.config.js

//Com as seguintes configurações

module.exports = {
    entry: './main.js',
    output: {
        path: __dirname,
        filename: 'bundle.js',
    },
    module: {
        rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                }
            }
        ],
    },
};

//instalar o loader

yarn add babel-loader -D

//testar o webpack
//alterar o script em package-json para

"dev": "webpack --mode=development -w"

//organizando o projeto: Criar as pastas 'public', onde ficarão os arquivos que não precisam ser monitorados pelo webpack e 'src', onde ficarão os arquivos .js, que precisam ser monitorados.

//instalar dev-server

yarn add webpack-dev-server -D

//alterar webpack.config.js

module.exports = {
    entry: './src/main.js',
    output: {
        path: __dirname + '/public',
        filename: 'bundle.js',
    },
    devServer: {
        contentBase:  __dirname + '/public',
    },
    module: {
        rules: [
            {
                test: /\.js$/,
                exclude: /node_modules/,
                use: {
                    loader: 'babel-loader',
                }
            }
        ],
    },
};

//alterar o script em package.json

"dev": "webpack-dev-server --mode=development"

//como o dev-server não cria o bundle.js, apenas o deixa embutido, caso precise do arquivo (para subir a aplicação, por exemplo), adicionamos um comando no script

"scripts": {
    "dev": "webpack-dev-server --mode=development",
    "build": "webpack --mode=production"
  }

//em seguida rodamos o comando

yarn build
